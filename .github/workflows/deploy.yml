name: Deploy to AWS Lambda

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: startup-budget-tracker
  LAMBDA_FUNCTION_NAME: startup-budget-tracker-lambda

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run check

      - name: Build application
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    # Required for OIDC
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Verify AWS Connection
        run: |
          aws sts get-caller-identity
          echo "AWS CLI configured successfully"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # Push the images to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Install dependencies
        run: npm ci

      - name: Deploy with Serverless
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.IMAGE_URI }}
          STAGE: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
        run: |
          serverless deploy --stage $STAGE --verbose

      - name: Run health check
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Get function URL and test
          FUNCTION_URL=$(aws lambda get-function-url-config --function-name $LAMBDA_FUNCTION_NAME-$STAGE --query 'FunctionUrl' --output text)
          if [ "$FUNCTION_URL" != "None" ]; then
            curl -f $FUNCTION_URL/health || exit 1
          fi

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-logs-${{ github.sha }}
          path: |
            .serverless/
            *.log
          retention-days: 7

  cleanup:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/staging'
    
    permissions:
      id-token: write
      contents: read
      
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Cleanup-${{ github.run_id }}

      - name: Cleanup old ECR images
        run: |
          # Keep only the latest 10 images
          aws ecr describe-images --repository-name $ECR_REPOSITORY --query 'sort_by(imageDetails,& imageCreatedAt)[:-10].[imageDigest]' --output text | while read digest; do
            if [ "$digest" != "None" ] && [ -n "$digest" ]; then
              aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageDigest=$digest
            fi
          done