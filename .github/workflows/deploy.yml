name: Deploy Playwright Lambda

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: technical-test
  IMAGE_TAG: latest # O usa ${{ github.sha }} para tags Ãºnicos

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: automation
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-Deploy

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: npm run build

    - name: Build Docker image
      run: |
        docker build \
          --platform linux/amd64 \
          --provenance=false \
          -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .

    - name: Tag and push Docker image
      run: |
        docker tag ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    - name: Deploy with Serverless
      env:
        AWS_ECR_REPOSITORY_URL: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
      run: |
        npx serverless deploy --verbose

    - name: Invoke Lambda Test
      run: |
        aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --region ${{ env.AWS_REGION }} \
          --payload '{}' \
          response.json
        cat response.json
        grep -q '"statusCode": 200' response.json || exit 1